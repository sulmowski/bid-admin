import React from 'react'
import Config from "../config"
import Button from '@material-ui/core/Button';
import TextField from '@material-ui/core/TextField';
import Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';
import { makeStyles } from '@material-ui/core/styles';
import Grid from '@material-ui/core/Grid';
import { UploadUtils } from "../libs/uploadUtils";
import Card from '@material-ui/core/Card';
import InputLabel from '@material-ui/core/InputLabel';
import FormControl from '@material-ui/core/FormControl';
import Select from '@material-ui/core/Select';
import DeleteForeverIcon from '@material-ui/icons/DeleteForever';
import IconButton from '@material-ui/core/IconButton';
import ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';
import ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';
import Tooltip from '@material-ui/core/Tooltip';

const useStyles = makeStyles(theme => ({
}));

export default function TableDDLEntry({ schemaDefinition, setSchemaDefinition, index }) {
    const classes = useStyles();
    const swapArray = (arr, i, j) => {
        let temp = arr[i]
        arr[i] = arr[j]
        arr[j] = temp;
        return arr.slice();
      }
    
      const changeMetadataForElement = (arr, index, fieldName, event) => {
        event.preventDefault()
        arr[index][fieldName] = event.target.value
        return arr.slice()
      }
    return (
        <Grid
            container
            spacing={1}
        >
            <Grid item xs={1}>
                {index + 1}
            </Grid>
            <Grid item md>
                <TextField id={"column-name" + index} label="Column name" value={schemaDefinition[index].name}
                    onChange={(event) => {
                        setSchemaDefinition(changeMetadataForElement(schemaDefinition, index, 'name', event))
                    }}
                />
            </Grid>
            <Grid item md>
                {Object.values(Config.dataTypesMapping.athenaToJsonSchemaMapping).includes(schemaDefinition[index].type) ?
                    <FormControl>
                        <InputLabel htmlFor="column-type">Column type</InputLabel>
                        <Select
                            native
                            value={schemaDefinition[index].type}
                            onChange={(event) => {
                                setSchemaDefinition(changeMetadataForElement(schemaDefinition, index, 'type', event))
                            }}
                        >
                            {Object.keys(Config.dataTypesMapping.dropdownMapping).map(key =>
                                <option key={key} value={Config.dataTypesMapping.dropdownMapping[key]}>{key}</option>)}
                        </Select>
                    </FormControl>
                    :
                    <Tooltip title="This type was generated by Spark ingestion, it's disabled to change through Webapp">
                        <TextField id={"column-type" + index} label="Column type" value={schemaDefinition[index].type} disabled />
                    </Tooltip>
                }
            </Grid>
            <Grid item md>
                <TextField id={"column-description" + index} label="Column description" value={schemaDefinition[index].description}
                    onChange={(event) => {
                        setSchemaDefinition(changeMetadataForElement(schemaDefinition, index, 'description', event))
                    }}
                />
            </Grid>
            <Grid item xs={1}>
                <IconButton aria-label="moveup" className={classes.margin} disabled={index == 0}
                    onClick={() => setSchemaDefinition(swapArray(schemaDefinition, index, index - 1))}
                >
                    <ArrowUpwardIcon fontSize="large" />
                </IconButton>
            </Grid>
            <Grid item xs={1}>
                <IconButton aria-label="movedown" className={classes.margin} disabled={index == schemaDefinition.length - 1}
                    onClick={() => setSchemaDefinition(swapArray(schemaDefinition, index, index + 1))}
                >
                    <ArrowDownwardIcon fontSize="large" />
                </IconButton>
            </Grid>
            <Grid item xs={1}>
                <IconButton aria-label="delete" className={classes.margin}
                    onClick={() => {
                        const copy = schemaDefinition.slice()
                        copy.splice(index, 1);
                        setSchemaDefinition(copy)
                    }}
                >
                    <DeleteForeverIcon fontSize="large" />
                </IconButton>
            </Grid>
        </Grid>)
}
